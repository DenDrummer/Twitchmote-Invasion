<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///default values for variables

//movement
hVel = 0;
vVel = 0;
maxVel = 8;
accel = 1;
slow = 0.5;
skid = 1;

//outside room
outsideRoom = 0;

//shooting
bulletSpeed = 22;
reloadTime = clamp(room_speed * (35 / 60) - (global.highScore / 100),
                   room_speed * ( 5 / 60),
                   room_speed * (35 / 60));
reloading = false;

//cheats
ghost = false;
invincible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shoot
reloading = false;
if(mouse_check_button(mb_left))
{
    var bulletDirection;
    if(instance_exists(obj_cursor))
    {
        var cursor = instance_nearest(x, y, obj_cursor);
        bulletDirection = point_direction(x,y,cursor.x,cursor.y);
    }
    else
    {
        bulletDirection = point_direction(x,y,mouse_x,mouse_y);
    }
    with(instance_create(x,y,obj_bullet))
    {
        direction = bulletDirection;
        speed = other.bulletSpeed;
        image_angle = direction;
        hspeed += other.hspeed;
        vspeed += other.vspeed;
    }
    audio_play_sound(snd_pistol, 1, false);
    reloading = true;
    alarm[0] = reloadTime;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement

//new movement
var hor = keyboard_check(vk_right) - keyboard_check(vk_left);
var ver = keyboard_check(vk_down) - keyboard_check(vk_up);

var spd = sqrt(sqr(hVel) + sqr(vVel));
if(hor == 0 &amp;&amp; ver == 0)
{
    //slow down
    if(spd &lt;= slow)
    {
        hVel = 0;
        vVel = 0;
    }
    else
    {
        hVel -= hVel / spd * slow;
        vVel -= vVel / spd * slow;
    }
}
else
{
    if(hVel * hor + vVel * ver &lt; 0)
    {
        //skid
        if(spd &lt;= skid)
        {
            hVel = 0;
            vVel = 0;
        }
        else
        {
            hVel -= hVel / spd * skid;
            vVel -= vVel / spd * skid;
        }
    }
    else
    {
        //accelerate
        hVel += hor * accel;
        vVel += ver * accel;
        spd = sqrt(sqr(hVel) + sqr(vVel));
        if (spd &gt; maxVel)
        {
            hVel = hVel / spd * maxVel;
            vVel = vVel / spd * maxVel;
        }
    }
}

var dir = point_direction(x,y,x+hVel,y+vVel);
var spd = point_distance(x,y,x+hVel,y+vVel);

//collision checks (disabled in ghost mode)
if (!ghost)
{
    while(spd &gt; 0)
    {
        var deviation = 15;
        var hVel2 = lengthdir_x(spd, dir);
        var vVel2 = lengthdir_y(spd, dir);
        var hVel3 = lengthdir_x(spd, dir+deviation);
        var vVel3 = lengthdir_y(spd, dir+deviation);
        var hVel4 = lengthdir_x(spd, dir-deviation);
        var vVel4 = lengthdir_y(spd, dir-deviation);
        hVel = hVel2;
        vVel = vVel2;
        if(!place_meeting(x+hVel2, y+vVel2, obj_wall))
        {
            break;
        }
        else if(!place_meeting(x+hVel3, y+vVel3, obj_wall))
        {
            hVel = hVel3;
            vVel = vVel3;
            dir += deviation;
            break;
        }
        else if(!place_meeting(x+hVel4, y+vVel4, obj_wall))
        {
            hVel = hVel4;
            vVel = vVel4;
            dir -= deviation;
            break;
        }
        else
        {
            spd -= 1;
        }
        if(spd &lt;= 0)
        {
            spd = 0;
            break;
        }
    }
}

direction = dir;
speed = spd;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wrap around room
/*
if(x&lt;0)
{
    x += room_width;
}
else if(x &gt; room_width)
{
    x -= room_width;
}

if(y &lt; 0)
{
    y += room_height;
}
else if(y &gt; room_height)
{
    y -= room_height;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shooting
if(mouse_check_button_pressed(mb_left) &amp;&amp; reloading == false)
{
    var bulletDirection;
    if(instance_exists(obj_cursor))
    {
        var cursor = instance_nearest(x, y, obj_cursor);
        bulletDirection = point_direction(x,y,cursor.x,cursor.y);
    }
    else
    {
        bulletDirection = point_direction(x,y,mouse_x,mouse_y);
    }
    with(instance_create(x, y, obj_bullet))
    {
        direction = bulletDirection;
        speed = other.bulletSpeed;
        image_angle = direction;
        hspeed += other.hspeed / 2;
        vspeed += other.vspeed / 2;
    }
    audio_play_sound(snd_pistol, 1, false);
    reloading = true;
    alarm[0] = reloadTime;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cheats
if(CHEATS)
{
    //toggle ghost
    if(keyboard_check_pressed(ord('G')))
    {
        ghost = !ghost;
    }
    
    //toggle invincible
    if(keyboard_check_pressed(ord('I')))
    {
        invincible = !invincible;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(other);
score += other.worth;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update highscore &amp; reset score
if(!invincible)
{
    if(score &gt; global.highScore)
    {
        global.highScore = score;
    }
    room_restart();
    score = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>112</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_wrap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
